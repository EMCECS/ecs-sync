allprojects {
    group = 'com.emc.ecs'
    version = '3.3.1'
}

ext.mainClass = 'com.emc.ecs.sync.EcsSync'

defaultTasks ':distZip'

buildscript {
    repositories {
        jcenter { url "https://jcenter.bintray.com/" }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.smokejumperit.gradle.license:Gradle-License-Report:0.0.2'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'license-report'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile files('lib/fplibrary-3.4.757.jar'),
            files('lib/security-1.1.jar'),
            "commons-cli:commons-cli:1.3.1",
            "com.zaxxer:HikariCP-java7:2.4.11",
            "com.amazonaws:aws-java-sdk-s3:1.11.714",
            // required due to vulnerability in jackson-databind
            "com.fasterxml.jackson.core:jackson-databind:2.8.11.1",
            "com.google.code.gson:gson:2.0",
            "com.emc.ecs:atmos-client:3.1.0",
            "com.emc.ecs:nfs-client:1.0.3",
            "com.emc.ecs:object-client:3.1.3",
            "com.sun.jersey:jersey-server:1.19.4",
            "mysql:mysql-connector-java:5.1.37",
            "net.java.truevfs:truevfs-profile-default:0.11.0",
            "org.apache.commons:commons-csv:1.4",
            "org.slf4j:slf4j-api:1.7.12",
            "org.slf4j:slf4j-log4j12:1.7.12",
            "org.springframework:spring-jdbc:3.2.17.RELEASE",
            "org.xerial:sqlite-jdbc:3.8.11.1",
            project(':ecs-sync-model')
    testCompile "junit:junit:4.11",
            "org.hsqldb:hsqldb:2.3.2",
            "com.amazonaws:aws-java-sdk-sts:1.11.714"
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    if (project.hasProperty('java8Lib')) {
        options.fork = true
        options.bootClasspath = new File(java8Lib).listFiles(
                [accept:{d, f-> f ==~ /.*\.jar/ }] as FilenameFilter
        ).join(File.pathSeparator)
    }
}

compileTestJava.options.encoding = 'UTF-8'

dependencyLicenseReport.dependsOn 'compileJava'

javadoc {
    options.encoding = 'UTF-8'
    if (JavaVersion.current() >= JavaVersion.VERSION_1_8) options.addStringOption('Xdoclint:none', '-quiet')
    else options.quiet()
}

shadowJar {
    classifier ''
    mergeServiceFiles()
    append('META-INF/spring.handlers')
    append('META-INF/spring.schemas')
    manifest {
        attributes 'Main-Class': mainClass,
                'Implementation-Version': project.version,
                'Class-Path': { configurations.runtime.collect { it.getName() }.join(' ') }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from "${docsDir}/javadoc"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

distributions {
    main {
        contents {
            from 'readme.txt'
            from 'license.txt'
            from 'license'
            into('3rd-party-licenses') {
                from dependencyLicenseReport
            }
            from shadowJar
            from { project(':ecs-sync-ctl').shadowJar }
            from 'script'
            into('sample') {
                from 'sample'
            }
            into('docker') {
                from 'docker'
            }
            into('doc') {
                from javadocJar
            }
            into('src') {
                from sourcesJar
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.3'
}
